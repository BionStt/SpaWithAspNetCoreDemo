/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.3.3.0 (NJsonSchema v9.4.2.0) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, OpaqueToken } from '@angular/core';
import { Http, Headers, ResponseContentType, Response } from '@angular/http';

export const api = new OpaqueToken('/api/');

@Injectable()
export class CustomersService {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(api) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    getCustomers(): Observable<CustomerListModel[] | null> {
        let url_ = this.baseUrl + "/api/Customers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCustomers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCustomers(response_);
                } catch (e) {
                    return <Observable<CustomerListModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<CustomerListModel[]>><any>Observable.throw(response_);
        });
    }

    protected processGetCustomers(response: Response): Observable<CustomerListModel[] | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: CustomerListModel[] | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(CustomerListModel.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<CustomerListModel[] | null>(<any>null);
    }

    postCustomer(customer: CreateCustomerModel | undefined): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Customers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(customer);
        
        let options_ = {
            body: content_,
            method: "post",
            responseType: ResponseContentType.Blob,
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPostCustomer(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPostCustomer(response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileResponse>><any>Observable.throw(response_);
        });
    }

    protected processPostCustomer(response: Response): Observable<FileResponse | null> {
        const status = response.status; 

        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*)"?;/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Observable.of({ fileName: fileName, data: response.blob(), status: status, headers: response.headers ? response.headers.toJSON() : {} });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.blob()).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText);
            });
        }
        return Observable.of<FileResponse | null>(<any>null);
    }

    getCustomer(id: string): Observable<CustomerDetailModel | null> {
        let url_ = this.baseUrl + "/api/Customers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCustomer(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCustomer(response_);
                } catch (e) {
                    return <Observable<CustomerDetailModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<CustomerDetailModel>><any>Observable.throw(response_);
        });
    }

    protected processGetCustomer(response: Response): Observable<CustomerDetailModel | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: CustomerDetailModel | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? CustomerDetailModel.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<CustomerDetailModel | null>(<any>null);
    }

    putCustomer(id: string, customer: UpdateCustomerModel | undefined): Observable<CustomerDetailModel | null> {
        let url_ = this.baseUrl + "/api/Customers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(customer);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPutCustomer(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPutCustomer(response_);
                } catch (e) {
                    return <Observable<CustomerDetailModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<CustomerDetailModel>><any>Observable.throw(response_);
        });
    }

    protected processPutCustomer(response: Response): Observable<CustomerDetailModel | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: CustomerDetailModel | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? CustomerDetailModel.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<CustomerDetailModel | null>(<any>null);
    }

    deleteCustomer(id: string): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Customers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            responseType: ResponseContentType.Blob,
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteCustomer(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteCustomer(response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileResponse>><any>Observable.throw(response_);
        });
    }

    protected processDeleteCustomer(response: Response): Observable<FileResponse | null> {
        const status = response.status; 

        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*)"?;/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Observable.of({ fileName: fileName, data: response.blob(), status: status, headers: response.headers ? response.headers.toJSON() : {} });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.blob()).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText);
            });
        }
        return Observable.of<FileResponse | null>(<any>null);
    }
}

@Injectable()
export class SampleDataService {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(api) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    weatherForecasts(): Observable<WeatherForecast[] | null> {
        let url_ = this.baseUrl + "/api/SampleData/WeatherForecasts";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processWeatherForecasts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processWeatherForecasts(response_);
                } catch (e) {
                    return <Observable<WeatherForecast[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<WeatherForecast[]>><any>Observable.throw(response_);
        });
    }

    protected processWeatherForecasts(response: Response): Observable<WeatherForecast[] | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: WeatherForecast[] | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WeatherForecast.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<WeatherForecast[] | null>(<any>null);
    }
}

export class CustomerListModel {
    id: string | undefined;
    name: string | undefined;

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): CustomerListModel {
        let result = new CustomerListModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export class CustomerDetailModel {
    id: string | undefined;
    address: string | undefined;
    city: string | undefined;
    companyName: string | undefined;
    contactName: string | undefined;
    contactTitle: string | undefined;
    country: string | undefined;
    fax: string | undefined;
    phone: string | undefined;
    postalCode: string | undefined;
    region: string | undefined;

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.address = data["address"];
            this.city = data["city"];
            this.companyName = data["companyName"];
            this.contactName = data["contactName"];
            this.contactTitle = data["contactTitle"];
            this.country = data["country"];
            this.fax = data["fax"];
            this.phone = data["phone"];
            this.postalCode = data["postalCode"];
            this.region = data["region"];
        }
    }

    static fromJS(data: any): CustomerDetailModel {
        let result = new CustomerDetailModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["address"] = this.address;
        data["city"] = this.city;
        data["companyName"] = this.companyName;
        data["contactName"] = this.contactName;
        data["contactTitle"] = this.contactTitle;
        data["country"] = this.country;
        data["fax"] = this.fax;
        data["phone"] = this.phone;
        data["postalCode"] = this.postalCode;
        data["region"] = this.region;
        return data; 
    }
}

export class CreateCustomerModel {
    customerId: string | undefined;
    address: string | undefined;
    city: string | undefined;
    companyName: string;
    contactName: string | undefined;
    contactTitle: string | undefined;
    country: string | undefined;
    fax: string | undefined;
    phone: string | undefined;
    postalCode: string | undefined;
    region: string | undefined;

    init(data?: any) {
        if (data) {
            this.customerId = data["customerId"];
            this.address = data["address"];
            this.city = data["city"];
            this.companyName = data["companyName"];
            this.contactName = data["contactName"];
            this.contactTitle = data["contactTitle"];
            this.country = data["country"];
            this.fax = data["fax"];
            this.phone = data["phone"];
            this.postalCode = data["postalCode"];
            this.region = data["region"];
        }
    }

    static fromJS(data: any): CreateCustomerModel {
        let result = new CreateCustomerModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["address"] = this.address;
        data["city"] = this.city;
        data["companyName"] = this.companyName;
        data["contactName"] = this.contactName;
        data["contactTitle"] = this.contactTitle;
        data["country"] = this.country;
        data["fax"] = this.fax;
        data["phone"] = this.phone;
        data["postalCode"] = this.postalCode;
        data["region"] = this.region;
        return data; 
    }
}

export class UpdateCustomerModel {
    customerId: string | undefined;
    address: string | undefined;
    city: string | undefined;
    companyName: string;
    contactName: string | undefined;
    contactTitle: string | undefined;
    country: string | undefined;
    fax: string | undefined;
    phone: string | undefined;
    postalCode: string | undefined;
    region: string | undefined;

    init(data?: any) {
        if (data) {
            this.customerId = data["customerId"];
            this.address = data["address"];
            this.city = data["city"];
            this.companyName = data["companyName"];
            this.contactName = data["contactName"];
            this.contactTitle = data["contactTitle"];
            this.country = data["country"];
            this.fax = data["fax"];
            this.phone = data["phone"];
            this.postalCode = data["postalCode"];
            this.region = data["region"];
        }
    }

    static fromJS(data: any): UpdateCustomerModel {
        let result = new UpdateCustomerModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["address"] = this.address;
        data["city"] = this.city;
        data["companyName"] = this.companyName;
        data["contactName"] = this.contactName;
        data["contactTitle"] = this.contactTitle;
        data["country"] = this.country;
        data["fax"] = this.fax;
        data["phone"] = this.phone;
        data["postalCode"] = this.postalCode;
        data["region"] = this.region;
        return data; 
    }
}

export class WeatherForecast {
    dateFormatted: string | undefined;
    temperatureC: number;
    summary: string | undefined;
    temperatureF: number;

    init(data?: any) {
        if (data) {
            this.dateFormatted = data["dateFormatted"];
            this.temperatureC = data["temperatureC"];
            this.summary = data["summary"];
            this.temperatureF = data["temperatureF"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateFormatted"] = this.dateFormatted;
        data["temperatureC"] = this.temperatureC;
        data["summary"] = this.summary;
        data["temperatureF"] = this.temperatureF;
        return data; 
    }
}

export interface FileResponse {
    data: Blob;
	status: number;
    fileName?: string;
	headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result: any; 

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}

function throwException(message: string, status: number, response: string, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => { 
        let reader = new FileReader(); 
        reader.onload = function() { 
            observer.next(this.result);
            observer.complete();
        }
        reader.readAsText(blob); 
    });
}